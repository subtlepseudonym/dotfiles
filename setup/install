#!/usr/bin/env -S zsh

cd "$(dirname "${0}")/.."

dotfiles_root="$(readlink -f $(pwd -P))"
home_dotfiles="${HOME}/.dotfiles"
workspace="${HOME}/workspace"
logfile="${HOME}/dotfile_install.log"

zparseopts -D -E -- \
	x+:=exclude_opts \
	-exclude+:=exclude_opts \
	v=verbose \
	verbose=verbose \
	-dry-run=dry_run \
	-unattended=unattended

exclude_opts=("${exclude_opts[@]:#-x}")
exclude_opts=("${exclude_opts[@]:#--exclude}")

exclude=(
	'*.git*'
	'*setup*'
	${exclude_opts}
)

info () {
	printf "\r	[ \033[00;34m..\033[0m ] $1\n"
}

user () {
	printf "\r	[ \033[0;33m??\033[0m ] $1\n"
}

success () {
	printf "\r\033[2K  [ \033[00;32mOK\033[0m ] $1\n"
}

error () {
	printf "\r\033[2K  [\033[0;31mFAIL\033[0m] $1\n"
}

make_workspace () {
	if [[ ${exclude[(ie)workspace]} -le ${#exclude} ]]; then
		info "skipping workspace installation"
		return
	fi

	if (( $#dry_run )); then
		success "dry-run: installed workspace"
		return
	fi

	mkdir -vp \
		"${workspace}/bin" \
		"${workspace}/doc" \
		"${workspace}/git" \
		"${workspace}/log" \
		"${workspace}/manifest" \
		"${workspace}/sandbox" \
		"${workspace}/script" \
		"${workspace}/volume" &>> ${logfile}

	if [[ $? == 0 ]]; then
		success "installed workspace"
	else
		error "could not install workspace, check ${logfile}"
	fi
}

make_vim_dir () {
	# skip if vim module is excluded
	[[ ${exclude[(ie)vim]} -le ${#exclude} ]] && return

	for src ('colors' 'tmp/backupdir' 'tmp/swpdir' 'tmp/undodir')
	do
		dir="${HOME}/.vim/${src}"
		if (( $#dry_run )); then
			success "dry-run: mkdir ${dir}"
		else
			mkdir -vp "${dir}" &>> ${logfile}
			(( $#verbose )) && success "created ${dir}"
		fi
	done

	for src ('colors' 'syntax')
	do
		dir="${dotfiles_root}/vim/${src}"
		if [[ -d "${dir}" ]]; then
			if (( $#dry_run)); then
				success "dry-run: coped recursively ${dir}"
			else
				cp -r "${dir}" "${HOME}/.vim/${src}" &>> ${logfile}
				(( $#verbose )) && success "copied recursively ${src}"
			fi
		fi
	done

	if (( $#dry_run )); then
		success "dry-run: installed .vim directory"
	else
		success "installed .vim directory"
	fi
}

install_dotfiles () {
	for src in $(find -H "${dotfiles_root}" -mindepth 2 -maxdepth 2 \( $(printf -- "-not -path */%s/* -and " ${exclude}) -true \) -type f -not -iregex '.*\.script')
	do
		rel_src="${src#"${dotfiles_root}/"}"
		dst_dir="${home_dotfiles}/$(dirname "${rel_src}")"

		if [[ ! -d "${dst_dir}" ]]; then
			if (( $#dry_run )); then
				success "dry-run: created ${dst_dir}"
			else
				mkdir -vp "${dst_dir}" &>> ${logfile}
			fi
		fi

		dst="${dst_dir}/$(basename "${rel_src}")"

		if (( $#dry_run )); then
			success "dry-run: copied ${src} to ${dst}"
		else
			cp "${src}" "${dst}"
			if [[ $? == 0 ]]; then
				(( $#verbose )) && success "copied ${src} to ${dst}"
			else
				error "could not copy ${src} to ${dst}"
			fi
		fi
	done

	if (( $#dry_run )); then
		success "dry-run: installed dotfiles"
	else
		success "installed dotfiles"
	fi
}

get_theme () {
	# skip if loki-theme module is excluded
	[[ ${exclude[(ie)loki-theme]} -le ${#exclude} ]] && return

	local ret
	ret=0

	themes_dir="${home_dotfiles/themes}"
	if (( $#dry_run )); then
		success "dry-run: created ${themes_dir}"
		success "dry-run: downloaded https://raw.githubusercontent.com/subtlepseudonym/loki-theme/master/themes/loki.zsh-theme"
		success "dry-run: downloaded https://raw.githubusercontent.com/subtlepseudonym/loki-theme/master/git/git-patch.zsh"
		success "dry-run: installed theme"
		return
	fi

	mkdir -vp "${themes_dir}" &>> ${logfile}
	ret=$(( $ret | $? ))

	curl --url "https://raw.githubusercontent.com/subtlepseudonym/loki-theme/master/themes/loki.zsh-theme" -o "${themes_dir}/loki.zsh-theme" &>> ${logfile}
	ret=$(( $ret | $? ))

	curl --url "https://raw.githubusercontent.com/subtlepseudonym/loki-theme/master/git-patch.zsh" -o "${home_dotfiles}/git/git-patch.zsh" &>> ${logfile}
	ret=$(( $ret | $? ))

	if [[ $ret == 0 ]]; then
		success "installed theme"
	else
		error "could not install theme, check ${logfile}"
	fi
}

link_file () {
	local src=$1 dst=$2

	local overwrite= backup= skip=
	local action=

	if [ -f "$dst" -o -d "$dst" -o -L "$dst" ]
	then

		if [[ "$overwrite_all" == "false" ]] && [[ "$backup_all" == "false" ]] && [[ "$skip_all" == "false" ]]
		then

			local currentSrc="$(readlink $dst)"

			if [[ "$currentSrc" == "$src" ]]
			then

				skip="true";

			else

				user "File already exists: $dst ($(basename "$src")), what do you want to do?\n\
				[s]kip, [S]kip all, [o]verwrite, [O]verwrite all, [b]ackup, [B]ackup all?"
				read action

				case "$action" in
					o )
						overwrite="true";;
					O )
						overwrite_all="true";;
					b )
						backup="true";;
					B )
						backup_all="true";;
					s )
						skip="true";;
					S )
						skip_all="true";;
					* )
						;;
				esac

			fi

		fi

		overwrite=${overwrite:-$overwrite_all}
		backup=${backup:-$backup_all}
		skip=${skip:-$skip_all}

		if [[ "$overwrite" == "true" ]]
		then
			if (( $#dry_run )); then
				success "dry-run: removed $dst"
			else
				rm -rf "$dst"
				success "removed $dst"
			fi
		fi

		if [[ "$backup" == "true" ]]
		then
			if (( $#dry_run)); then
				success "dry-run: moved $dst to ${dst}.bak"
			else
				mv "$dst" "${dst}.bak"
				success "moved $dst to ${dst}.bak"
			fi
		fi

		if [[ "$skip" == "true" ]]
		then
			success "skipped $src"
		fi
	fi

	if [[ "$skip" != "true" ]]	# "false" or empty
	then
		if (( $#dry_run )); then
			success "dry-run: linked $src to $dst"
		else 
			ln -s "$src" "$dst"
			success "linked $src to $dst"
		fi
	fi
}

install_links () {
	local overwrite_all=false backup_all=false skip_all=false

	for src in $(find -H "${home_dotfiles}" -maxdepth 2 \( $(printf -- "-not -path */%s/* -and " ${exclude}) -true \) -name '*.link')
	do
		dst="${HOME}/.$(basename "${src%.*}")"
		link_file "${src}" "${dst}"
	done
}

install_scripts () {
	script_dir="${workspace}/script"
	if [[ ${exclude[(ie)workspace]} -le ${#exclude} ]]; then
		script_dir="${HOME}/script"
		mkdir -p "${script_dir}"
	fi

	if [[ "$(uname -s)" != "Darwin" ]]; then
		exclude+="macos"
		info "$(printf "excluding macos module for uname value '%s'" $(uname -s))"
	fi

	for src in $(find -H "${dotfiles_root}" -maxdepth 2 \( $(printf -- "-not -path */%s/* -and " ${exclude}) -true \) -name '*.script')
	do
		dst="${script_dir}/$(basename "${src%.script}")"
		if (( $#dry_run )); then
			success "dry-run: copied ${src} to ${dst}"
		else
			cp "${src}" "${dst}"
			if [[ $? == 0 || $#dry_run ]]; then
				success "copied ${src} to ${dst}"
			else
				error "could not copy ${src} to ${dst}"
			fi
		fi
	done
}

list_modules () {
	df_exclude=("setup" "zsh" ${exclude})

	df_modules=("workspace" "loki-theme")
	df_modules+=($(basename -a \
		$(find "${dotfiles_root}" \
			-mindepth 1 -maxdepth 1 \
			\( $(printf -- "-not -path */%s -and " ${df_exclude}) -true \) \
			-and -type d
		)
	))

	info "The following modules will be installed:"
	info
	for module in ${(i)df_modules}; do
		info "\t$module"
	done
	info
	info "( Use --exclude to remove modules from this list )"

	if [[ -z "${unattended}" ]]; then
		user "Continue? [Yn]"
		read action
	else
		action="yes"
	fi

	case "$action" in
		n )
			return 1;;
		* )
			;;
	esac
}

list_modules || exit
: > ${logfile}

make_workspace
make_vim_dir

install_dotfiles
get_theme

install_links
install_scripts
