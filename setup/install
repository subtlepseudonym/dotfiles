#!/usr/bin/env -S zsh

cd "$(dirname "${0}")/.."

dotfiles_root="$(pwd -P)"
home_dotfiles="${HOME}/.dotfiles"
workspace="${HOME}/workspace"
logfile="${HOME}/dotfile_install.log"

zparseopts -D -E -- \
	x+:=exclude_opts \
	-exclude+:=exclude_opts \
	-unattended=unattended

exclude_opts=("${exclude_opts[@]:#-x}")
exclude_opts=("${exclude_opts[@]:#--exclude}")

exclude=('*.git*' ${exclude_opts})

info () {
	printf "\r	[ \033[00;34m..\033[0m ] $1\n"
}

user () {
	printf "\r	[ \033[0;33m??\033[0m ] $1\n"
}

success () {
	printf "\r\033[2K  [ \033[00;32mOK\033[0m ] $1\n"
}

error () {
	printf "\r\033[2K  [\033[0;31mFAIL\033[0m] $1\n"
}

make_workspace () {
	if [[ ${exclude[(ie)workspace]} -le ${#exclude} ]]; then
		info "skipping workspace installation"
		return
	fi

	mkdir -vp \
		"${workspace}/bin" \
		"${workspace}/doc" \
		"${workspace}/git" \
		"${workspace}/manifest" \
		"${workspace}/sandbox" \
		"${workspace}/script" \
		"${workspace}/volume" 1>> $logfile 2>&1

	if [[ $? == 0 ]]; then
		success "installed workspace"
	else
		error "could not install workspace, check $logfile"
	fi
}

make_vim_dir () {
	# skip if vim module is excluded
	[[ ${exclude[(ie)vim]} -le ${#exclude} ]] && return

	mkdir -vp \
		"${HOME}/.vim/colors" \
		"${HOME}/.vim/tmp/backupdir" \
		"${HOME}/.vim/tmp/swpdir" \
		"${HOME}/.vim/tmp/undodir" 1>> $logfile 2>&1

	if [[ -d "${dotfiles_root}/vim/colors" ]]; then
		cp -r "${dotfiles_root}/vim/colors/." "${HOME}/.vim/colors" &>> $logfile
	fi

	if [[ -d "${dotfiles_root}/vim/syntax" ]]; then
		cp -r "${dotfiles_root}/vim/syntax/." "${HOME}/.vim/syntax" &>> $logfile
	fi

	if [[ $? == 0 ]]; then
		success "installed .vim directory"
	else
		error "could not install .vim directory, check $logfile"
	fi
}

install_dotfiles () {
	mkdir "${home_dotfiles}"
	for src in $(find -H "${dotfiles_root}" -maxdepth 2 \( $(printf -- "-path */%s -o " ${exclude}) -false \) -prune -o -name '*.zsh' -print -o -name '*.link' -print)
	do
		dst_dir="${home_dotfiles}/$(basename $(dirname "${src}"))"
		[[ ! -d "${dst_dir}" ]] && mkdir -p "${dst_dir}"
		cp "${src}" "${dst_dir}/$(basename "${src}")"
	done

	if [[ $? == 0 ]]; then
		success "installed dotfiles"
	else
		error "could not install dotfiles, check $logfile"
	fi
}

get_theme () {
	# skip if loki-theme module is excluded
	[[ ${exclude[(ie)loki-theme]} -le ${#exclude} ]] && return

	local ret
	ret=0

	mkdir -vp "${home_dotfiles}/themes" 1>> $logfile 2>&1
	ret=$(( $ret | $? ))

	curl --url "https://raw.githubusercontent.com/subtlepseudonym/loki-theme/master/themes/loki.zsh-theme" -o "${home_dotfiles}/themes/loki.zsh-theme" 1>> $logfile 2>&1
	ret=$(( $ret | $? ))

	curl --url "https://raw.githubusercontent.com/subtlepseudonym/loki-theme/master/git-patch.zsh" -o "${home_dotfiles}/git/git-patch.zsh" 1>> $logfile 2>&1
	ret=$(( $ret | $? ))

	if [[ $? == 0 ]]; then
		success "installed theme"
	else
		error "could not install theme, check $logfile"
	fi
}

link_file () {
	local src=$1 dst=$2

	local overwrite= backup= skip=
	local action=

	if [ -f "$dst" -o -d "$dst" -o -L "$dst" ]
	then

		if [[ "$overwrite_all" == "false" ]] && [[ "$backup_all" == "false" ]] && [[ "$skip_all" == "false" ]]
		then

			local currentSrc="$(readlink $dst)"

			if [[ "$currentSrc" == "$src" ]]
			then

				skip="true";

			else

				user "File already exists: $dst ($(basename "$src")), what do you want to do?\n\
				[s]kip, [S]kip all, [o]verwrite, [O]verwrite all, [b]ackup, [B]ackup all?"
				read action

				case "$action" in
					o )
						overwrite="true";;
					O )
						overwrite_all="true";;
					b )
						backup="true";;
					B )
						backup_all="true";;
					s )
						skip="true";;
					S )
						skip_all="true";;
					* )
						;;
				esac

			fi

		fi

		overwrite=${overwrite:-$overwrite_all}
		backup=${backup:-$backup_all}
		skip=${skip:-$skip_all}

		if [[ "$overwrite" == "true" ]]
		then
			rm -rf "$dst"
			success "removed $dst"
		fi

		if [[ "$backup" == "true" ]]
		then
			mv "$dst" "${dst}.bak"
			success "moved $dst to ${dst}.bak"
		fi

		if [[ "$skip" == "true" ]]
		then
			success "skipped $src"
		fi
	fi

	if [[ "$skip" != "true" ]]	# "false" or empty
	then
		ln -s "$src" "$dst"
		success "linked $src to $dst"
	fi
}

install_links () {
	local overwrite_all=false backup_all=false skip_all=false

	for src in $(find -H "${home_dotfiles}" -maxdepth 2 \( $(printf -- "-path */%s -o " ${exclude}) -false \) -prune -o -name '*.link' -print)
	do
		dst="${HOME}/.$(basename "${src%.*}")"
		link_file "${src}" "${dst}"
	done
}

install_scripts () {
	script_dir="${workspace}/script"
	if [[ ${exclude[(ie)workspace]} -le ${#exclude} ]]; then
		script_dir="${HOME}/script"
		mkdir -p "${script_dir}"
	fi

	if [[ "$(uname -s)" != "Darwin" ]]; then
		exclude+="macos"
		info "$(printf "excluding macos scripts for uname value '%s'" $(uname -s))"
	fi

	for src in $(find -H "${dotfiles_root}" -maxdepth 2 \( $(printf -- "-path */%s -o " ${exclude}) -false \) -prune -o -name '*.script' -print)
	do
		dst="${script_dir}/$(basename "${src%.script}")"
		cp "${src}" "${dst}"
		if [[ $? -eq 0 ]]; then
			success "copied ${src} to ${dst}"
		else
			error "could not copy ${src} to ${dst}"
		fi
	done
}

list_modules () {
	df_exclude=("setup" "zsh" ${exclude})

	df_modules=("workspace" "loki-theme")
	df_modules+=($(basename -a \
		$(find "${dotfiles_root}" \
			\( $(printf -- "-path */%s -o " ${df_exclude}) -false \) \
		-prune -o -type d ! -path "${dotfiles_root}" -print)
	))

	info "The following modules will be installed:"
	info
	for module in ${(i)df_modules}; do
		info "\t$module"
	done
	info
	info "( Use --exclude to remove modules from this list )"

	if [[ -z "${unattended}" ]]; then
		user "Continue? [Yn]"
		read action
	else
		action="yes"
	fi

	case "$action" in
		n )
			return 1;;
		* )
			;;
	esac
}

list_modules || exit
: > $logfile

make_workspace
make_vim_dir

install_dotfiles
get_theme

install_links
install_scripts
